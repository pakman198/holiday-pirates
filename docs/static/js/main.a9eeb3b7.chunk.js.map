{"version":3,"sources":["components/Button/index.js","components/Review/index.js","components/ReviewsList/index.js","components/Hotel/index.js","components/HotelsList/index.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","id","onClick","e","preventDefault","fetchHotels","className","Review","console","log","review","data","positive","name","comment","ReviewsList","this","display_block","reviews","review_blocks","map","i","components_Review","key","length","React","Component","Hotel","state","requestedReviews","reviewsVisible","renderStars","count","star_arr","star_element","push","clickHandler","hotel","_this$state","_this","setState","fetchReviews","url","concat","axios","get","then","_ref","Object","toConsumableArray","catch","error","_this2","_this$state2","_this$props","_this$props$data","date_start","date_end","start","Date","end","style","backgroundImage","images","country","city","stars","description","price","toLocaleDateString","components_ReviewsList","HotelsList","hotelBlock","hotels","components_Hotel","require","polyfill","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hotelsError","errorMessage","components_Button","components_HotelsList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9eeb3b7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = (props) => {\r\n\r\n    const clickHandler = (e) => {\r\n        e.preventDefault();\r\n        props.fetchHotels();\r\n    }\r\n    \r\n    return (\r\n        <button id=\"loadHotels\" onClick={clickHandler} className=\"btn btn-secondary\">Load Hotels</button>\r\n    );\r\n    \r\n}\r\n\r\nexport default Button;","import './review.css';\r\nimport React from 'react';\r\n\r\nconst Review = (props) => {\r\n    console.log({props});\r\n\r\n    const { data: review } = props;\r\n\r\n    return (\r\n        <div className=\"review\">\r\n            <div className=\"type\">\r\n                <div className=\"icon\">\r\n                    <span>{review.positive ? '+' : '\\u2013'}</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"content\">\r\n                <h4>{ review.name }</h4>\r\n                <p className=\"m-0\">{ review.comment }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Review;","import './reviews-list.css';\r\nimport React from 'react';\r\n\r\nimport Review from '../Review';\r\n\r\nclass ReviewsList extends React.Component {\r\n\r\n    render() {\r\n        console.log(this.props)\r\n        const { reviews } =  this.props;\r\n        const review_blocks = reviews.map((review, i) => <Review key={i} data={review} /> );\r\n        let display_block;\r\n\r\n        if(reviews.length !== 0) {\r\n            display_block = review_blocks;\r\n        } else {\r\n            display_block = <div>This hotel has no reviews yet!</div>\r\n        }\r\n\r\n        return (\r\n            <div className=\"reviews-list\">\r\n                { display_block }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReviewsList;","import './hotel.css'\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport ReviewsList from '../ReviewsList';\r\n\r\nclass Hotel extends React.Component {\r\n\r\n    state = {\r\n        requestedReviews: false,\r\n        reviews: [],\r\n        reviewsVisible: false\r\n    }\r\n\r\n    renderStars = (count) => {\r\n        const max_stars = 5;\r\n        const star_arr = []\r\n\r\n        for(let i = 1; i <= max_stars; ++i) {\r\n\r\n            const star_element = <span key={i} className={ i<count ? 'star': ''}>&#9733;</span>;\r\n            star_arr.push(star_element);\r\n        }\r\n\r\n        return star_arr;\r\n    }\r\n\r\n    clickHandler = (hotel) => {\r\n        const { requestedReviews, reviewsVisible } = this.state;\r\n        \r\n        if(!requestedReviews) {\r\n            this.fetchReviews(hotel);\r\n            return;\r\n        }\r\n\r\n        if(reviewsVisible) {\r\n            this.setState({ reviewsVisible: false });\r\n        }else {\r\n            this.setState({ reviewsVisible: true });\r\n        }\r\n    }\r\n\r\n    fetchReviews = (hotel) => {\r\n        const url = `http://fake-hotel-api.herokuapp.com/api/reviews?hotel_id=${hotel}`;\r\n        axios.get(url)\r\n            .then(({data}) => {\r\n                this.setState({\r\n                    reviews: [...data],\r\n                    requestedReviews: true,\r\n                    reviewsVisible: true\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log('error');\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { reviewsVisible, reviews } = this.state;\r\n        const { data: hotel, data: { date_start, date_end }} = this.props;\r\n        const start = new Date(date_start);\r\n        const end = new Date(date_end);\r\n\r\n        return (\r\n            <div className=\"hotel-container\">\r\n                <div className={ reviewsVisible ? 'hotel reviews-display' : 'hotel' }>\r\n                    <div className=\"photo\" style={{ backgroundImage: `url(${hotel.images[0]})` }}></div>\r\n                    <div className=\"data\">\r\n                        <div className=\"title\">\r\n                            <div className=\"name\">\r\n                                <h2>{hotel.name}</h2>\r\n                                <p>\r\n                                    <span className=\"country\">{ hotel.country }</span>\r\n                                    - \r\n                                    <span className=\"city\">{ hotel.city }</span>\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"stars\">\r\n                                { this.renderStars(hotel.stars) }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"description\">\r\n                            { hotel.description}\r\n                        </div>\r\n                        <div className=\"footer\">\r\n                            <div className=\"action\">\r\n                                <button \r\n                                    className=\"btn btn-lg btn-primary\" \r\n                                    onClick={(e) => {\r\n                                        e.preventDefault();\r\n                                        this.clickHandler(hotel.id)\r\n                                    }}\r\n                                >\r\n                                    Show reviews\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"price\">\r\n                                <p className=\"value mb-1\">{hotel.price} &euro;</p>\r\n                                <p>\r\n                                    {start.toLocaleDateString('de-DE')} \r\n                                    - \r\n                                    {end.toLocaleDateString('de-DE')}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                { reviewsVisible ? <ReviewsList reviews={reviews} /> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hotel;","import React from 'react';\r\nimport Hotel from '../Hotel'\r\n\r\nclass HotelsList extends React.Component {\r\n\r\n    render() {\r\n        const { hotels } = this.props;\r\n\r\n        const hotelBlock = hotels.map((hotel, i) => <Hotel key={i} data={hotel} />);\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"hotels-list\">\r\n                        { hotelBlock }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HotelsList","import './App.css';\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Button from './components/Button';\nimport HotelsList from './components/HotelsList';\n\nrequire('es6-promise').polyfill();\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      hotels: [],\n      hotelsError: false,\n    }\n  }\n\n  fetchHotels = () => {\n    axios.get('http://fake-hotel-api.herokuapp.com/api/hotels?count=5')\n      .then(({data}) => {\n        console.log({data});\n        const {hotels} = this.state;\n\n        this.setState({\n          hotelsError: false,\n          hotels: [...hotels, ...data]\n        })\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({\n          hotelsError: true\n        })\n      });\n  }\n\n  errorMessage =  (\n    <div className=\"alert alert-secondary\">\n      An error occurred\n    </div>\n  )\n\n  render() {\n    const { hotelsError, hotels } = this.state;\n\n    return (\n      <div className=\"App container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <Button fetchHotels={this.fetchHotels} />\n\n            { hotelsError ? this.errorMessage : null }\n            { hotels.length > 0 ? <HotelsList hotels={hotels} /> : null }  \n          </div>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}